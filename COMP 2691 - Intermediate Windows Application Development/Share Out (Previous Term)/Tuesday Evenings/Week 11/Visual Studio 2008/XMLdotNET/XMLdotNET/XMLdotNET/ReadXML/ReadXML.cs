using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Collections;
using System.IO;




namespace XMLdotNET.ReadXML
{
    public partial class ReadXML : Form
    {
                         
        public ReadXML()
        {
            InitializeComponent();
        }
        // ***************************************************************************
        // Load the currently selected XML source
        private void ButtonLoad_Click(object sender, EventArgs e)
        {
            string fileName = SourceData.SelectedItem.ToString();
            LoadAndDisplay(fileName);
        }
        // ***************************************************************************
        
        // ***************************************************************************
        // Initialize the form
        private void ReadXML_Load(object sender, EventArgs e)
        {
            // Populate the list with the available sources
            SourceData.Items.Add("Employees.xml");
            SourceData.Items.Add("EmpAttrib.xml");
            SourceData.Items.Add("Folders.xml");
            SourceData.Items.Add("Class.xml");
            SourceData.Items.Add("RefClass.xml");
            SourceData.SelectedIndex = 0;

            // Populate the list with the available list modes
            ReadMode.DataSource = Enum.GetValues(typeof(XmlReadMode)); 

        //     ReadSchema
        //     Reads any inline schema and loads the data. If the System.Data.DataSet already
        //     contains schema, new tables may be added to the schema, but an exception
        //     is thrown if any tables in the inline schema already exist in the System.Data.DataSet.
        
        //     IgnoreSchema
        //     Ignores any inline schema and reads data into the existing System.Data.DataSet
        //     schema. If any data does not match the existing schema, it is discarded (including
        //     data from differing namespaces defined for the System.Data.DataSet). If the
        //     data is a DiffGram, IgnoreSchema has the same functionality as DiffGram.
        
        //     InferSchema
        //     Ignores any inline schema, infers schema from the data and loads the data.
        //     If the System.Data.DataSet already contains a schema, the current schema
        //     is extended by adding new tables or adding columns to existing tables. An
        //     exception is thrown if the inferred table already exists but with a different
        //     namespace, or if any of the inferred columns conflict with existing columns.
  
        //     DiffGram    
        //     Reads a DiffGram, applying changes from the DiffGram to the System.Data.DataSet.
        //     The semantics are identical to those of a System.Data.DataSet.Merge(System.Data.DataSet)
        //     operation. As with the System.Data.DataSet.Merge(System.Data.DataSet) operation,
        //     System.Data.DataRow.RowState values are preserved. Input to System.Data.DataSet.ReadXml(System.Xml.XmlReader)
        //     with DiffGrams should only be obtained using the output from System.Data.DataSet.WriteXml(System.IO.Stream)
        //     as a DiffGram.
        
        //     Fragment
        //     Reads XML fragments, such as those generated by executing FOR XML queries,
        //     against an instance of SQL Server. When System.Data.XmlReadMode is set to
        //     Fragment, the default namespace is read as the inline schema.

        //     InferTypedSchema
        //     Ignores any inline schema, infers a strongly typed schema from the data,
        //     and loads the data. If the type cannot be inferred from the data, it is interpreted
        //     as string data. If the System.Data.DataSet already contains a schema, the
        //     current schema is extended, either by adding new tables or by adding columns
        //     to existing tables. An exception is thrown if the inferred table already
        //     exists but with a different namespace, or if any of the inferred columns
        //     conflict with existing columns.
     






        }
        // ***************************************************************************


        // ***************************************************************************
        // Read and display the specified XML file and loads it into a DataSet
        void LoadAndDisplay(string fileName)
        {
            // Display the XML source in a textbox
            StreamReader fr = new StreamReader(fileName);
            Data.Text = fr.ReadToEnd();
            fr.Close();

            // Load a DataSet
            XmlReadMode mode = (XmlReadMode)Enum.Parse(typeof(XmlReadMode), ReadMode.SelectedItem.ToString());
            DataSet ds = new DataSet();
            XmlReadMode used = ds.ReadXml(fileName, mode);

            // Show the DataSet
            grid.DataSource = ds;
            ModeUsed.Text = "Used \"" + used.ToString() + "\"";

            // Show the recognized (and used) schema
            StringWriter writer = new StringWriter();
            ds.WriteXmlSchema(writer);
            FinalSchema.Text = writer.ToString();
            writer.Close();
        }
        // ***************************************************************************


        // ***************************************************************************
        // The currently selected read mode
        private void ReadMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            ModeUsed.Text = "Will use \"" + ReadMode.SelectedItem.ToString() + "\"";
        }
        // ***************************************************************************

        





    }
}