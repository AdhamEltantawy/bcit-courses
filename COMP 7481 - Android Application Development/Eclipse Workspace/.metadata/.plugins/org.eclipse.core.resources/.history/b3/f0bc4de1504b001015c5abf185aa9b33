/**
 * Project: TestScale
 * File: Scale.java
 * Date: 2011-03-10
 * Time: 11:16:40 AM
 */

/**
 * @author Steffen L. Norgren, A00683006
 *
 */
public class Scale {
	private static final int nTick = 10;

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//bestTick(265F, 10);
		looseLabel(179F,-0.85F);
	}
	
	public static void looseLabel(float min, float max) {
		int nFrac;
		float tickSpacing; /* tick mark spacing */
		float range; /* data range in graph */
		float graphMin; /* minimum data point */
		float graphMax; /* maximum data point */
		
		range = niceNum(max - min, false);
		tickSpacing = niceNum(range / (nTick - 1), true);
		graphMin = (float) (Math.floor(min / tickSpacing) * tickSpacing);
		graphMax = (float) (Math.ceil(max / tickSpacing) * tickSpacing);
		nFrac = (int) Math.max(-Math.floor(Math.log10(tickSpacing)), 0);
		
		System.out.println("Range\t\t: " + range);
		System.out.println("Tick Spacing\t: " + tickSpacing);
		System.out.println("Graph Min\t: " + graphMin);
		System.out.println("Graph Max\t: " + graphMax);
		System.out.println("Nice Fraction\t: " + nFrac);
	}
	
	public static double niceNum(float range, boolean round) {
		double exponent; /* exponent of range */
		double fraction; /* fractional part of range */
		double niceFraction; /* nice, rounded fraction */
		
		exponent = Math.floor(Math.log10(range));
		fraction = range / Math.pow(10, exponent);
		
		if (round) {
			if (fraction < 1.5F)
				niceFraction = 1F;
			else if (fraction < 3F)
				niceFraction = 2F;
			else if (fraction < 7F)
				niceFraction = 5F;
			else
				niceFraction = 10F;
		}
		else {
			if (fraction <= 1F)
				niceFraction = 1F;
			else if (fraction <= 2F)
				niceFraction = 2F;
			else if (fraction <= 5F)
				niceFraction = 5F;
			else
				niceFraction = 10F;
		}
		
		return (float) (niceFraction * Math.pow(10F, exponent));
	}
	
	/* this doesn't work nicely with decimals */
	public static void bestTick(float dataRange, int maxTicks) {
		float minimum = dataRange / maxTicks;
		float magnitude = (float) (10 * Math.floor(Math.log10(minimum)));
		float residual = minimum / magnitude;
		float tick;
		
		if (residual > 5) {
			tick = 10 * magnitude;
		}
		else if (residual > 3) {
			tick = 5 * magnitude;
		}
		else if (residual > 2.5) {
			tick = 3 * magnitude;
		}
		else if (residual > 2) {
			tick = 2.5F * magnitude;
		}
		else if (residual > 1) {
			tick = 2 * magnitude;
		}
		else {
			tick = magnitude;
		}

		System.out.println("Minimum:\t" + minimum);
		System.out.println("Magnitude:\t" + magnitude);
		System.out.println("Residual:\t" + residual);
		
		System.out.println("Tick:\t\t" + Float.toString(tick));
	}
}
