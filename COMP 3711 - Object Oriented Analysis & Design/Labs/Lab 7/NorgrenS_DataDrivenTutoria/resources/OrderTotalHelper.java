// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;

import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;

/**
 * Script Name   : <b>OrderTotal</b><br>
 * Generated     : <b>2008/11/14 3:30:39 AM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows XP x86 5.1 build 2600 Service Pack 3 <br>
 * 
 * @since  November 14, 2008
 * @author Administrator
 */
public abstract class OrderTotalHelper extends RationalTestScript
{
	/**
	 * _1899Text: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : $18.99
	 * 		name : productOrderLabelb
	 * 		.classIndex : 1
	 */
	protected TextGuiSubitemTestObject _1899Text() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("_1899Text"));
	}
	/**
	 * _1899Text: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : $18.99
	 * 		name : productOrderLabelb
	 * 		.classIndex : 1
	 */
	protected TextGuiSubitemTestObject _1899Text(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("_1899Text"), anchor, flags);
	}
	
	/**
	 * _1999: with default state.
	 *		text : $19.99
	 * 		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $19.99
	 * 		name : totalPrice
	 * 		.classIndex : 9
	 */
	protected GuiTestObject _1999() 
	{
		return new GuiTestObject(
                        getMappedTestObject("_1999"));
	}
	/**
	 * _1999: with specific test context and state.
	 *		text : $19.99
	 * 		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : $19.99
	 * 		name : totalPrice
	 * 		.classIndex : 9
	 */
	protected GuiTestObject _1999(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("_1999"), anchor, flags);
	}
	
	/**
	 * CardNumberIncludeTheSpacesText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpacesText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpacesText"));
	}
	/**
	 * CardNumberIncludeTheSpacesText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpacesText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpacesText"), anchor, flags);
	}
	
	/**
	 * CityStateZipText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : City, State, Zip:
	 * 		name : .cszField
	 * 		.classIndex : 7
	 */
	protected TextGuiSubitemTestObject cityStateZipText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cityStateZipText"));
	}
	/**
	 * CityStateZipText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : City, State, Zip:
	 * 		name : .cszField
	 * 		.classIndex : 7
	 */
	protected TextGuiSubitemTestObject cityStateZipText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cityStateZipText"), anchor, flags);
	}
	
	/**
	 * ClassicsJava: with default state.
	 *		.captionText : ClassicsCD
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject classicsJava() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava"));
	}
	/**
	 * ClassicsJava: with specific test context and state.
	 *		.captionText : ClassicsCD
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject classicsJava(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava"), anchor, flags);
	}
	
	/**
	 * creditCombo: with default state.
	 *		.itemCount : 3
	 * 		.itemText : {Visa,Amex,Mastercard}
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Card Type:
	 * 		name : creditCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject creditCombo() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("creditCombo"));
	}
	/**
	 * creditCombo: with specific test context and state.
	 *		.itemCount : 3
	 * 		.itemText : {Visa,Amex,Mastercard}
	 * 		.class : javax.swing.JComboBox
	 * 		.priorLabel : Card Type:
	 * 		name : creditCombo
	 * 		.classIndex : 0
	 */
	protected TextSelectGuiSubitemTestObject creditCombo(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("creditCombo"), anchor, flags);
	}
	
	/**
	 * ExpirationDateText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDateText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDateText"));
	}
	/**
	 * ExpirationDateText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDateText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDateText"), anchor, flags);
	}
	
	/**
	 * ItemText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Item: 
	 * 		name : productOrderLabel
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject itemText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("itemText"));
	}
	/**
	 * ItemText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Item: 
	 * 		name : productOrderLabel
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject itemText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("itemText"), anchor, flags);
	}
	
	/**
	 * NameText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Name:
	 * 		name : .nameField-cust
	 * 		.classIndex : 5
	 */
	protected TextGuiSubitemTestObject nameText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("nameText"));
	}
	/**
	 * NameText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Name:
	 * 		name : .nameField-cust
	 * 		.classIndex : 5
	 */
	protected TextGuiSubitemTestObject nameText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("nameText"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"), anchor, flags);
	}
	
	/**
	 * PhoneText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Phone:
	 * 		name : .phoneField
	 * 		.classIndex : 8
	 */
	protected TextGuiSubitemTestObject phoneText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("phoneText"));
	}
	/**
	 * PhoneText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Phone:
	 * 		name : .phoneField
	 * 		.classIndex : 8
	 */
	protected TextGuiSubitemTestObject phoneText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("phoneText"), anchor, flags);
	}
	
	/**
	 * PlaceAnOrder: with default state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"));
	}
	/**
	 * PlaceAnOrder: with specific test context and state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"), anchor, flags);
	}
	
	/**
	 * QuantityText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Quantity:
	 * 		name : .quantityField
	 * 		.classIndex : 2
	 */
	protected TextGuiSubitemTestObject quantityText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("quantityText"));
	}
	/**
	 * QuantityText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Quantity:
	 * 		name : .quantityField
	 * 		.classIndex : 2
	 */
	protected TextGuiSubitemTestObject quantityText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("quantityText"), anchor, flags);
	}
	
	/**
	 * StreetText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Street:
	 * 		name : .streetField
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject streetText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("streetText"));
	}
	/**
	 * StreetText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Street:
	 * 		name : .streetField
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject streetText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("streetText"), anchor, flags);
	}
	
	/**
	 * tree2: with default state.
	 *		.class : javax.swing.JTree
	 * 		name : tree2
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tree2() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tree2"));
	}
	/**
	 * tree2: with specific test context and state.
	 *		.class : javax.swing.JTree
	 * 		name : tree2
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tree2(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tree2"), anchor, flags);
	}
	
	/**
	 * Locate and return the verification point _1999_text object in the SUT.
	 */
	protected IFtVerificationPoint _1999_textVP() 
	{
		return vp("_1999_text");
	}
	protected IFtVerificationPoint _1999_textVP(TestObject anchor)
	{
		return vp("_1999_text", anchor);
	}
	
	

	protected OrderTotalHelper()
	{
		setScriptName("OrderTotal");
	}
	
}

