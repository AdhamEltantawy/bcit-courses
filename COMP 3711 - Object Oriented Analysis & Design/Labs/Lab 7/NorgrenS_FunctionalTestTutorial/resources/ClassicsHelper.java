// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;

import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;

/**
 * Script Name   : <b>Classics</b><br>
 * Generated     : <b>2008/11/14 2:13:06 AM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows XP x86 5.1 build 2600 Service Pack 3 <br>
 * 
 * @since  November 14, 2008
 * @author Administrator
 */
public abstract class ClassicsHelper extends RationalTestScript
{
	/**
	 * CardNumberIncludeTheSpacesText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpacesText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpacesText"));
	}
	/**
	 * CardNumberIncludeTheSpacesText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Card Number (include the spaces):
	 * 		name : .cardNumberField
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject cardNumberIncludeTheSpacesText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("cardNumberIncludeTheSpacesText"), anchor, flags);
	}
	
	/**
	 * ClassicsJava: with default state.
	 *		.captionText : ClassicsCD
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject classicsJava() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava"));
	}
	/**
	 * ClassicsJava: with specific test context and state.
	 *		.captionText : ClassicsCD
	 * 		.class : ClassicsJava
	 * 		accessibleContext.accessibleName : ClassicsCD
	 */
	protected TopLevelTestObject classicsJava(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("classicsJava"), anchor, flags);
	}
	
	/**
	 * Close: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close-order
	 * 		.classIndex : 1
	 */
	protected GuiTestObject close() 
	{
		return new GuiTestObject(
                        getMappedTestObject("close"));
	}
	/**
	 * Close: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Close
	 * 		name : close-order
	 * 		.classIndex : 1
	 */
	protected GuiTestObject close(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("close"), anchor, flags);
	}
	
	/**
	 * ExpirationDateText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDateText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDateText"));
	}
	/**
	 * ExpirationDateText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : Expiration Date:
	 * 		name : .expireField
	 * 		.classIndex : 4
	 */
	protected TextGuiSubitemTestObject expirationDateText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("expirationDateText"), anchor, flags);
	}
	
	/**
	 * jmb: with default state.
	 *		.class : javax.swing.JMenuBar
	 * 		name : jmb
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jmb() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jmb"));
	}
	/**
	 * jmb: with specific test context and state.
	 *		.class : javax.swing.JMenuBar
	 * 		name : jmb
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jmb(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jmb"), anchor, flags);
	}
	
	/**
	 * MemberLogon: with default state.
	 *		.captionText : Member Logon
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Member Logon
	 * 		name : logFrame1
	 */
	protected TopLevelTestObject memberLogon() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("memberLogon"));
	}
	/**
	 * MemberLogon: with specific test context and state.
	 *		.captionText : Member Logon
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Member Logon
	 * 		name : logFrame1
	 */
	protected TopLevelTestObject memberLogon(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("memberLogon"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-orderlogon
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-statuslogon2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok3() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok3"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName :   OK  
	 * 		name : ok-statuslogon2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok3(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok3"), anchor, flags);
	}
	
	/**
	 * OrderForTrentCulpito: with default state.
	 *		text : Order for Trent Culpito
	 * 		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Orders
	 * 		name : label-ordersfor
	 * 		.classIndex : 0
	 */
	protected GuiTestObject orderForTrentCulpito() 
	{
		return new GuiTestObject(
                        getMappedTestObject("orderForTrentCulpito"));
	}
	/**
	 * OrderForTrentCulpito: with specific test context and state.
	 *		text : Order for Trent Culpito
	 * 		.class : javax.swing.JLabel
	 * 		accessibleContext.accessibleName : Orders
	 * 		name : label-ordersfor
	 * 		.classIndex : 0
	 */
	protected GuiTestObject orderForTrentCulpito(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("orderForTrentCulpito"), anchor, flags);
	}
	
	/**
	 * PasswordText: with default state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText2
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText"));
	}
	/**
	 * PasswordText: with specific test context and state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password:
	 * 		name : .passText2
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject passwordText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("passwordText"), anchor, flags);
	}
	
	/**
	 * PlaceAnOrder: with default state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"));
	}
	/**
	 * PlaceAnOrder: with specific test context and state.
	 *		.captionText : Place an Order
	 * 		.class : javax.swing.JFrame
	 * 		accessibleContext.accessibleName : Place an Order
	 * 		name : orderForm
	 */
	protected TopLevelTestObject placeAnOrder(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("placeAnOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrderButton2
	 * 		.classIndex : 0
	 */
	protected GuiTestObject placeOrder(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder"), anchor, flags);
	}
	
	/**
	 * PlaceOrder: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"));
	}
	/**
	 * PlaceOrder: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Place Order
	 * 		name : placeOrder
	 * 		.classIndex : 1
	 */
	protected GuiTestObject placeOrder2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("placeOrder2"), anchor, flags);
	}
	
	/**
	 * RememberPassword: with default state.
	 *		text : Remember Password
	 * 		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Password
	 * 		name : checkRemember
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword"));
	}
	/**
	 * RememberPassword: with specific test context and state.
	 *		text : Remember Password
	 * 		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : Password
	 * 		name : checkRemember
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject rememberPassword(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("rememberPassword"), anchor, flags);
	}
	
	/**
	 * tree2: with default state.
	 *		.class : javax.swing.JTree
	 * 		name : tree2
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tree2() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tree2"));
	}
	/**
	 * tree2: with specific test context and state.
	 *		.class : javax.swing.JTree
	 * 		name : tree2
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject tree2(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("tree2"), anchor, flags);
	}
	
	/**
	 * Locate and return the verification point Classics_tree object in the SUT.
	 */
	protected IFtVerificationPoint Classics_treeVP() 
	{
		return vp("Classics_tree");
	}
	protected IFtVerificationPoint Classics_treeVP(TestObject anchor)
	{
		return vp("Classics_tree", anchor);
	}
	
	/**
	 * Locate and return the verification point OrderForTrentCulpito_standard object in the SUT.
	 */
	protected IFtVerificationPoint OrderForTrentCulpito_standardVP() 
	{
		return vp("OrderForTrentCulpito_standard");
	}
	protected IFtVerificationPoint OrderForTrentCulpito_standardVP(TestObject anchor)
	{
		return vp("OrderForTrentCulpito_standard", anchor);
	}
	
	

	protected ClassicsHelper()
	{
		setScriptName("Classics");
	}
	
}

