/*
 * MainMenu.cpp
 *
 *  Created on: 24-Mar-2009
 *      Author: d3vil
 */

#include "MainMenu.h"

MainMenu::MainMenu(std::string options[],TTF_Font* optfont,TTF_Font* selectfont, SDL_Color optColor,
							SDL_Surface * screen, std::string background)
{
	int i;
	//set options
	printf("Setting up options\n");
	for (i = 0; i < NUM_OPTS; i++)
	{
		options_[i] = options[i];
		optColor_[i] = optColor;
		optLevel_[i] = NUM_OPTS - i;
	}
	printf("Done\n");
	printf("Setting up selected options\n");
	//set first options as selected
	selectedOption_ = 0;
	optFont_[0] = selectfont;
	optFontSize_[0] = DEF_SEL_FONT_SIZE;
	printf("Done\n");
	printf("Setting up options fonts\n");
	//set default option font
	for(i = 1 ; i < NUM_OPTS; i++)
	{
		optFont_[i] = optfont;
		optFontSize_[i] = DEF_FONT_SIZE;
	}
	printf("Done\n");
	screen_ 	= screen;
	background_ = load_image(background.c_str());

	if(background_ == NULL)
		throw "Error Loading Background";
	printf("BackGround loaded .. setting messages\n");

	this->setMessages();
	printf("Done main init\n");
}

MainMenu::~MainMenu() {
	// TODO Auto-generated destructor stub
}

//main menu background funcs
//copy background
bool MainMenu::load_background(const SDL_Surface &background)
{
	background_ = new SDL_Surface(background);
	return background_ != NULL;
}

//load from file
bool MainMenu::load_background(const std::string filename)
{
	background_ = load_image(filename.c_str());
	return background_ != NULL;

}

//get background
SDL_Surface* MainMenu::get_background() const
{
	return background_;
}

//set screen
bool MainMenu::set_screen(SDL_Surface* screen)
{
	if(screen != NULL)
	{
		screen_ = screen;
		return screen_ != NULL;
	}

	return false;
}
//get screen
SDL_Surface* MainMenu::get_screen() const
{
	return screen_;
}

//main menu options funcs
void MainMenu::set_option(const std::string& option, int optionIndex)
{
	options_[optionIndex] = option;
}
std::string MainMenu::get_option(const int optionIndex)
{
	return options_[optionIndex];
}

//options display level funcs
int MainMenu::set_opt_level(const int level, const int optionIndex)
{
		int temp = optLevel_[optionIndex];
		optLevel_[optionIndex] = level;
		if(level == NUM_OPTS)
		{
			selectedOption_ = 0;
		}
		return temp;
}
//TODO same as above but search by name if needed
int MainMenu::set_opt_level(const int optionIndex, const std::string option){return 1;}

int MainMenu::get_opt_level(const int optionIndex)
{
	return optLevel_[optionIndex];
}
//TODO same as above but search by name if needed
int MainMenu::get_opt_level(const std::string option){return 1;}


//options display font fucs
void MainMenu::set_opt_font(const std::string font, const int font_size, const int optionIndex)
{
	optFont_[optionIndex]=TTF_OpenFont(font.c_str(),font_size);
	optFontSize_[optionIndex] = font_size;
}
//TODO same as above but search by name if needed
void MainMenu::set_opt_font(const std::string font, const int font_size, const std::string option){}

//set option colour
void MainMenu::set_opt_color(SDL_Color colour, int optionIndex)
{
	optColor_[optionIndex] = colour;
}
//TODO same as above but search by name if needed
void MainMenu::set_opt_color(SDL_Color colour, const std::string option){}

//return current font filename and sets font_size to current font size
TTF_Font* MainMenu::get_opt_font( const int optionIndex)
{

	return optFont_[optionIndex];
}

//TODO same as above but search by name if needed
TTF_Font* MainMenu::get_opt_font(const std::string option){return optFont_[0];}

SDL_Color MainMenu::get_opt_color(int optionIndex)
{
	return optColor_[optionIndex];
}
//TODO same as above but search by name if needed
SDL_Color MainMenu::get_opt_color(const std::string option){return optColor_[0];}

int MainMenu::getSelectedOption() const
    {
        return selectedOption_;
    }

void MainMenu::setSelectedOption(int selectedOption_)
{
	this->selectedOption_ = selectedOption_;
}

SDL_Surface **MainMenu::getMessages()
{
	return messages_;
}

void MainMenu::setMessages()
{
	printf("Setting up messages\n");
	for(int i = 0; i < NUM_OPTS ; i++)
	{
		messages_[i] = TTF_RenderText_Solid( optFont_[i], options_[i].c_str(),optColor_[i]);
	}
	printf("M Done\n");

}

void MainMenu::show()
{

	SDL_Rect* clip = NULL;
	SDL_Rect offset;
	int i, p = 1;

	offset.x = offset.y = 0;
	i = SDL_BlitSurface( background_, 0, screen_, 0 );

	for(i = 0; i < NUM_OPTS; i++)
	{
		offset.x= (SCREEN_WIDTH  - messages_[i]->w) /2;
		offset.y = (SCREEN_HEIGHT - messages_[i]->h)/2 + i*p * 100;

		SDL_BlitSurface( messages_[i], clip, screen_, &offset );
		p *= -1;
	}

}

void MainMenu::refresh()
{
	this->setMessages();
	this->show();
}

