import java.util.Calendar;

public class Quicksort {

	public Quicksort() {	
	}
	
	public void Sort(int[] input) {
		this.Sort(input, 0, input.length - 1);
	}
	
	public void Sort(int[] input, int left, int right) {
		if (right <= left) {
			return;
		}
		else {
			int pivot = this.Partition(input, left, right);
			this.Sort(input, left, pivot - 1);
			this.Sort(input, pivot + 1, right);
		}
	}
	
	private int Partition(int[] input, int left, int right) {
        int i = left - 1;
        int j = right;
        
        while (true) {
            while (input[++i] < input[right]) {
                ; // do nothing, just iterate
            }
            
            while (input[--j] > input[right]) {
                if (j == left) {
                	break;
                }
            }
            
            if (i >= j) {
            	break;            
            }
            
            Swap(input, i, j);
        }
        
        Swap(input, i, right);
        return i;
	}
	
	private void Swap(int[] input, int xPos, int yPos) {
		int xVal = input[xPos];
		
		input[xPos] = input[yPos];
		input[yPos] = xVal;
	}
	
	public void RunTests(int runTimes) {
		ArrayUtils au = new ArrayUtils();
		
		
		// Store time averages & set # of run times
		double[] avg = new double[12];
		
		// Run Mergesort tests
		System.out.println("Running MergeSort " + runTimes + " times...");
		for (int i = 0; i < runTimes; i++) {
			avg[0] += TestMerge(au.CreateRandom(100, 1, 100));
			avg[1] += TestMerge(au.CreateRandom(1000, 1, 100));
			avg[2] += TestMerge(au.CreateRandom(10000, 1, 100));
			avg[3] += TestMerge(au.CreateRandom(100000, 1, 100));

			avg[4] += TestMerge(au.CreateSequential(100));
			avg[5] += TestMerge(au.CreateSequential(1000));
			avg[6] += TestMerge(au.CreateSequential(10000));
			avg[7] += TestMerge(au.CreateSequential(100000));
			
			avg[8] += TestMerge(au.CreateDecremental(100));
			avg[9] += TestMerge(au.CreateDecremental(1000));
			avg[10] += TestMerge(au.CreateDecremental(10000));
			avg[11] += TestMerge(au.CreateDecremental(100000));
		}
		
		System.out.println("Random with size n = 10^2: " + (avg[0] / runTimes) + "ms");
		System.out.println("Random with size n = 10^3: " + (avg[1] / runTimes) + "ms");
		System.out.println("Random with size n = 10^4: " + (avg[2] / runTimes) + "ms");
		System.out.println("Random with size n = 10^5: " + (avg[3] / runTimes) + "ms");

		System.out.println("Sequential with size n = 10^2: " + (avg[4] / runTimes) + "ms");
		System.out.println("Sequential with size n = 10^3: " + (avg[5] / runTimes) + "ms");
		System.out.println("Sequential with size n = 10^4: " + (avg[6] / runTimes) + "ms");
		System.out.println("Sequential with size n = 10^5: " + (avg[7] / runTimes) + "ms");
		
		System.out.println("Decremental with size n = 10^2: " + (avg[8] / runTimes) + "ms");
		System.out.println("Decremental with size n = 10^3: " + (avg[9] / runTimes) + "ms");
		System.out.println("Decremental with size n = 10^4: " + (avg[10] / runTimes) + "ms");
		System.out.println("Decremental with size n = 10^5: " + (avg[11] / runTimes) + "ms");

	}
	
	private double TestMerge(int[] input) {

		double start = Calendar.getInstance().getTimeInMillis();		
		this.Sort(input);
		double end = Calendar.getInstance().getTimeInMillis();
		
		return (end - start);
	}
}
