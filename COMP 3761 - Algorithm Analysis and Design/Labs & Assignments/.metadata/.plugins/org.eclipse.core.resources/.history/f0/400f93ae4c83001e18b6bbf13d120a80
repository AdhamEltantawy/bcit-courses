import java.util.Calendar;

public class Quicksort {

	public Quicksort() {	
	}
	
	public void Sort(int[] input) {
		this.Sort(input, 0, input.length - 1);
	}
	
	public void Sort(int[] input, int left, int right) {
		if (right <= left) {
			return;
		}
		else {
			int pivot = this.Partition(input);
			this.Sort(input, left, i - 1);
			this.Sort(input, i + 1, right);
		}
	}
	
	private int Partition(int[] input) {
		int leftValue = input[0];
		int rightIndex = input.length;
		int index = 0;
		
		do {
			do {
				index++;
			} while (input[index] >= leftValue);
			
			do {
				rightIndex--;
			} while (input[rightIndex] <= leftValue);
			
			Swap(input, index, rightIndex);
		} while (index >= rightIndex);
		
		Swap(input, index, rightIndex);
		Swap(input, 0, rightIndex);
		
		return rightIndex;
	}
	
	private void Swap(int[] input, int xPos, int yPos) {
		int xVal = input[xPos];
		int yVal = input[yPos];
		
		input[xPos] = yVal;
		input[yPos] = xVal;
	}
	
	public void RunTests(int runTimes) {
		ArrayUtils au = new ArrayUtils();
		
		int[] test = au.CreateRandom(100, 1, 100);
		
		System.out.println(au.toString(test));
		
		TestMerge(test);
		
		System.out.println(au.toString(test));		
	}
	
	private double TestMerge(int[] input) {

		double start = Calendar.getInstance().getTimeInMillis();		
		this.Sort(input);
		double end = Calendar.getInstance().getTimeInMillis();
		
		return (end - start);
	}
}
